# 活动选择问题
'''
假设有n个活动，这些活动要占用同一片场地，而场地在某时刻只能供—个活动使用。
每个活动都有一个开始时间s和结束时间f(题目中时间以整数表示),表示活动在[si, fi)区间占用场地。
问:安排哪些活动能够使该场地举办的活动的个数最多?
'''
activities = [(0, 6), (5, 7), (3, 9), (1, 4), (3, 5), (5, 9),
              (6, 10), (2,14), (12, 16), (8, 11), (8, 12)]  # 元组列表表示(si,fi)
# 根据贪心算法结论，按最早结束时间排序
activities.sort(key = lambda x: x[1]) # 这里的x是列表中每个元组，lambda求得x[1],元组中的第二个数

def activities_selection(a): # param a：活动列表
    res = [a[0]]  # 结果列表，活动列表中最先结束活动的一定也说最优解中最先结束的活动
    for i in range(1,len(a)): # a[0]已经传入结果列表
        # 保证开始时间与上一个活动结束时间不重叠
        if a[i][0] >= res[-1][1]:  # 第i个活动的开始时间：a[i][0];上一个活动（最优解中）的结束时间：res[-1][1]
            res.append(a[i])
    
    return res

print(activities_selection(activities))